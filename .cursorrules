Project Context

    App Name: AirShare - P2P File Sharing
    Platforms: Web (Desktop & Mobile)
    Technologies: Next.js, React, TypeScript, WebTorrent, TailwindCSS, shadcn/ui
    Development Environment: macOS, Node.js

Project Structure

    .
├── .git/
├── .next/
├── app/
│   ├── api/
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   └── page.tsx
├── components/
│   ├── ui/
│   ├── file-sharing.tsx
│   ├── loading.tsx
│   ├── main-screen.tsx
│   └── theme-provider.tsx
├── hooks/
│   ├── use-mobile.tsx
│   ├── use-toast.ts
│   └── use-webtorrent.ts
├── lib/
│   └── utils.ts
├── node_modules/
├── public/
├── .cursorrules
├── .gitignore
├── .nvmrc
├── components.json
├── eslint.config.mjs
├── next-env.d.ts
├── next.config.mjs
├── package-lock.json
├── package.json
├── postcss.config.mjs
├── README.md
├── tailwind.config.ts
└── tsconfig.json

General Guidelines

    Do not hallucinate, always provide complete, functional code solutions without skipping, leaving TODOs, placeholders or abbreviating sections.
  
    Optimization Priorities:
        Performance: Optimize for speed and efficiency, especially in WebTorrent functionality.
        Readability: Write clear and understandable code.
        Security: Ensure code is secure and follows best practices.
        Function Structure: Do not change function inputs and outputs or divide code into smaller functions unless explicitly requested.

    Expertise: You are an expert programming assistant focused on producing clear, readable JavaScript/TypeScript code for Next.js and React applications.
    Knowledge: Use the latest versions of Next.js, React, and WebTorrent and adhere to the latest features and best practices.
    Answer Quality:
        Provide accurate, factual, and thoughtful answers.
        Excel at reasoning and problem-solving.
        Follow the user's requirements carefully and precisely.
        Think step-by-step and plan your code in detailed pseudocode before writing.
        Confirm your understanding before writing code if unsure.
    Code Standards:
        Write correct, up-to-date, bug-free, secure, performant, and efficient code.
        Prioritize readability over performance where applicable.
        Fully implement all requested functionality.
        Do not leave any TODOs, placeholders, or missing pieces.
    Communication: Be concise and minimize unnecessary prose. If unsure about an answer, express uncertainty appropriately.

Specific Guidelines

1. State Management

    React Hooks:
        Use React hooks for state management (useState, useEffect, useContext, useReducer).
        Create custom hooks for reusable logic.
    Context API:
        Use React Context for global state when appropriate.
    Props:
        Pass props explicitly for component-specific state.
    WebTorrent State:
        Manage WebTorrent client state in a dedicated custom hook (use-webtorrent.ts).

2. Performance Optimization

    Lazy Loading:
        Use Next.js dynamic imports for code splitting.
        Implement lazy loading for large components.
    Memoization:
        Use React.memo, useMemo, and useCallback to prevent unnecessary re-renders.
    WebTorrent Optimization:
        Initialize WebTorrent client only when needed.
        Clean up WebTorrent resources when components unmount.
        Use proper cleanup functions for torrents to avoid memory leaks.

3. WebTorrent Implementation

    Client Initialization:
        Initialize WebTorrent client in the use-webtorrent.ts custom hook.
    Torrent Creation:
        Implement functions to create torrents from files and text.
    Seeding:
        Manage seeding state and provide UI feedback during the process.
    Downloading:
        Handle torrent downloads with progress tracking and real-time updates.
    WebRTC:
        Configure WebRTC for browser-to-browser communication with proper STUN servers.
    Tracker Configuration:
        Set up and manage WebTorrent trackers with reliable WebSocket trackers.

4. File Handling

    File Selection:
        Implement drag-and-drop and file picker interfaces.
        Support clipboard paste detection for text sharing.
    File Processing:
        Handle file chunking and processing efficiently.
    File Storage:
        Use appropriate storage methods for browser environments.
    File Streaming:
        Implement streaming for media files when possible.

5. UI/UX Guidelines

    Responsive Design:
        Ensure the application works well on all device sizes using Tailwind CSS.
    Loading States:
        Provide clear loading indicators for torrent operations with progress updates.
    Error Handling:
        Display user-friendly error messages using the toast notification system.
    Progress Tracking:
        Show download/upload progress with visual indicators.
    Accessibility:
        Ensure the application is accessible to all users with proper ARIA attributes.

6. Next.js Best Practices

    App Router:
        Use the Next.js App Router for routing.
    Server Components:
        Use Server Components where appropriate.
    Client Components:
        Mark components that need client-side interactivity with "use client" directive.
    API Routes:
        Implement API routes for server-side operations if needed.
    Metadata:
        Configure proper metadata for SEO in layout.tsx.

7. WebTorrent-Specific Considerations

    Browser Compatibility:
        Handle WebRTC and WebTorrent browser compatibility issues with proper polyfills.
    Network Configuration:
        Provide fallbacks for restrictive network environments.
    Peer Discovery:
        Implement efficient peer discovery mechanisms using multiple trackers.
    Data Verification:
        Ensure data integrity during transfers.
    Connection Management:
        Handle connection establishment and teardown properly with event listeners.

8. Security Considerations

    Content Verification:
        Implement hash verification for downloaded content.
    User Privacy:
        Respect user privacy in peer-to-peer connections.
    Input Validation:
        Validate all user inputs and file data before processing.

9. Testing and Debugging

    Logging:
        Implement appropriate logging for debugging WebTorrent operations.
        Use structured logging for tracking complex operations.

10. Code Organization

    Component Structure:
        Organize components by feature or function.
    Custom Hooks:
        Extract reusable logic into custom hooks (use-webtorrent.ts, use-toast.ts, use-mobile.tsx).
    Utility Functions:
        Create utility functions for common operations in utils.ts.
    Type Definitions:
        Define TypeScript interfaces and types for better code quality (TorrentFile, SharingState, etc.).


